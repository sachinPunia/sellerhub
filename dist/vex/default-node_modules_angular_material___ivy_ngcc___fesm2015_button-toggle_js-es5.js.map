{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/button-toggle.js"],"names":["_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","InjectionToken","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","EventEmitter","change","appearance","_buttonToggles","forEach","toggle","name","_markForCheck","coerceBooleanProperty","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","SelectionModel","select","filter","checked","markForCheck","fn","isDisabled","disabled","Array","isArray","length","event","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","isSelected","_rawValue","some","ngDevMode","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","_emitChangeEvent","ɵfac","MatButtonToggleGroup_Factory","t","ɵdir","type","selectors","contentQueries","MatButtonToggleGroup_ContentQueries","rf","ctx","dirIndex","MatButtonToggle","_t","hostAttrs","hostVars","hostBindings","MatButtonToggleGroup_HostBindings","vertical","inputs","outputs","exportAs","features","ctorParameters","ChangeDetectorRef","decorators","Optional","Inject","args","propDecorators","ContentChildren","descendants","Input","Output","Directive","selector","providers","host","_MatButtonToggleBase","mixinDisableRipple","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","id","_appearance","_isSelected","_syncButtonToggle","group","_isPrechecked","monitor","stopMonitoring","options","_buttonElement","nativeElement","focus","newChecked","MatButtonToggle_Factory","ɵcmp","viewQuery","MatButtonToggle_Query","first","MatButtonToggle_HostBindings","MatButtonToggle_focus_HostBindingHandler","disableRipple","ariaLabel","ngContentSelectors","decls","vars","consts","template","MatButtonToggle_Template","MatButtonToggle_Template_button_click_0_listener","_onButtonClick","_r0","buttonId","directives","styles","encapsulation","changeDetection","ElementRef","FocusMonitor","String","Attribute","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","MatButtonToggleModule","MatButtonToggleModule_Factory","ɵmod","ɵinj","imports","MatCommonModule","MatRippleModule","NgModule","exports","declarations","ngJitMode"],"mappings":"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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_button-toggle_js-es5.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {\n});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map"]}